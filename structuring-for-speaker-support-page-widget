<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Speaker Portal & Questionnaire</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link 
    href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" 
    rel="stylesheet"
  >
  <style>
    :root {
      --primary-blue: #162A53;
      --primary-green: #89A84F;
      --light-gray: #F5F7FA;
      --blue: #162A53;
      --green: #89A84F;
      --white: #FFFFFF;
      --input-border: #d1d9e6;
      --shadow-light: rgba(22, 42, 83, 0.08);
    }
    body {
      font-family: 'Montserrat', sans-serif;
      background-color: var(--light-gray);
    }
a {
  color: #0000ff !important; /* Force hyperlink color to blue */
}
    .tab-active {
      background-color: var(--primary-blue);
      color: white;
      border-top-left-radius: 0.5rem;
      border-top-right-radius: 0.5rem;
    }
    .tab-inactive {
      background-color: rgba(22, 42, 83, 0.1);
      color: var(--primary-blue);
      border-top-left-radius: 0.5rem;
      border-top-right-radius: 0.5rem;
    }
    .tab-inactive:hover {
      background-color: rgba(22, 42, 83, 0.2);
    }
    .content-section {
      display: none;
    }
    .content-section.active {
      display: block;
    }

    /* CEU widget CSS */
    /* Force Montserrat everywhere */
    html, body, input, textarea, button, label, h2, .output {
      font-family: 'Montserrat', sans-serif !important;
    }
    ::placeholder { opacity: 0.6; }

    *, *::before, *::after { box-sizing: border-box; }

    body {
      margin: 0;
      padding: 2rem;
      background: none; /* Removed background */
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
    }

    .ceu-widget {
      background: none; /* Removed gray-ish background */
      border-radius: 16px;
      box-shadow: none; /* Removed shadow */
      width: 90%;
      max-width: 1000px;
      padding: 1rem 2.5rem;
      color: var(--blue);
    }

    .ceu-widget h2 {
      margin: 0 0 2rem;
      text-align: center;
      font-size: 2rem;
      font-weight: 700;
      letter-spacing: 0.5px;
    }

    .ceu-widget label {
    display: block;
    margin-bottom: 0.4rem;
    font-weight: 500;
    font-size: 1.1rem; /* Increase font size slightly */
    }

    .ceu-widget input,
    .ceu-widget textarea {
      width: 100%;
      border: 2px solid var(--input-border);
      border-radius: 10px;
      padding: 0.8rem 1rem;
      font-size: 1rem;
      margin-bottom: 1.5rem;
      background: #fafbfc;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }
    .ceu-widget input:focus,
    .ceu-widget textarea:focus {
      outline: none;
      border-color: var(--green);
      box-shadow: 0 0 0 4px rgba(137,168,79,0.2);
    }

    .ceu-widget button {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.6rem;
      width: 100%;
      padding: 0.9rem;
      background: #162A53;
      color: var(--white);
      border: none;
      border-radius: 12px;
      font-size: 1.05rem;
      font-weight: 600;
      cursor: pointer;
      box-shadow: 0 6px 12px var(--shadow-light);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .ceu-widget button:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px var(--shadow-light);
    }
    .ceu-widget button:active {
      transform: translateY(1px);
      box-shadow: 0 4px 8px var(--shadow-light);
    }

.output-buttons {
  display: flex;
  gap: 0.5rem; /* spacing between them */
  justify-content: flex-start;
  margin-top: 2rem; /* Add padding above the buttons */
}

  .copy-btn {
  flex: 0 0 75%;
      margin-right: 0.5rem; /* Add spacing between buttons */
    visibility: hidden; /* Initially hidden */
    opacity: 0; /* Initially invisible */
    transition: visibility 0s, opacity 0.2s ease-in-out;
  }
  .copy-btn.visible {
    visibility: visible; /* Make visible */
    opacity: 1; /* Fade in */
  }

  .edit-btn {
  flex: 0 0 25%;
  max-width: 25%;
      visibility: hidden; /* Initially hidden */
    opacity: 0; /* Initially invisible */
    transition: visibility 0s, opacity 0.2s ease-in-out;
  }
  .edit-btn.visible {
    visibility: visible; /* Make visible */
    opacity: 1; /* Fade in */
  }
    .copy-btn:hover {
      filter: brightness(0.9);
    }

    .icon-send {
      width: 20px;
      height: 20px;
      stroke: var(--white);
    }

    .ceu-widget .output {
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 2px solid var(--input-border);
      white-space: pre-wrap;
      line-height: 1.6;
      max-height: 320px;
      overflow-y: auto;
      font-size: 0.98rem;
    }

    .loading {
      font-style: italic;
      color: var(--blue);
      text-align: center;
    }

    .suggestions {
      position: absolute;
      background: var(--white);
      border: 1px solid var(--input-border);
      border-radius: 8px;
      box-shadow: 0 4px 8px var(--shadow-light);
      max-height: 200px;
      overflow-y: auto;
      z-index: 10;
      width: 100%;
    }
    .suggestions div {
      padding: 0.5rem;
      cursor: pointer;
    }
    .suggestions div:hover {
      background: var(--bg-start);
    }
.saved-versions {
  margin-top: 1rem;
  border-top: 2px solid var(--input-border);
  padding-top: 1rem;
  display: flex; /* Use flexbox for horizontal layout */
  gap: 1rem; /* Add spacing between versions */
  flex-wrap: wrap; /* Allow wrapping if there are too many versions */
}

.saved-versions .version {
  cursor: pointer;
  color: var(--white); /* Text color */
  background: var(--green); /* Same green as the save button */
  padding: 0.5rem 1rem; /* Add padding around each version */
  border: none; /* Remove border */
  border-radius: 8px; /* Rounded corners */
  text-decoration: none; /* Remove underline */
  font-weight: 500; /* Slightly bold text */
  transition: background-color 0.2s ease; /* Smooth hover effect */
}

.saved-versions .version:hover {
  background: #6f8e3e; /* Slightly darker shade of green on hover */
}
  .instruction {
    color: #6f8e3e;
    font-size: 0.9rem; /* One font size smaller */
    font-style: italic; /* Make text italicized */
    margin-top: 0.2rem; /* Reduce space above the instruction */
    margin-bottom: 0.5rem; /* Reduce space below the instruction */
  }
  @media (max-width: 640px) {
  .ceu-widget {
    display: none !important;
  }
}
/* Limit button width and enable text wrapping */
.tab-btn {
  max-width: 300px; /* Set a maximum width for the button */
  white-space: normal; /* Allow text to wrap */
  text-align: center; /* Center-align the text */
}
/* hide the mobile text by default */
.mobile-label { display: none; }

/* on small screens, swap them */
@media (max-width: 640px) {
  .desktop-label { display: none; }
  .mobile-label { display: inline; }
}
/* External-link tab look */
.tab-external {
  background-color: rgba(137, 168, 79, 0.12);          /* subtle green tint */
  color: var(--primary-blue);
  border: 1px solid rgba(137, 168, 79, 0.35);
}

.tab-external:hover {
  background-color: rgba(137, 168, 79, 0.20);
}

/* If you ever make an external tab "active", use this look */
.tab-external.tab-active {
  background-color: var(--primary-green); /* solid green */
  color: #fff;
  border-color: var(--primary-green);
}

  </style>
</head>
<body>
  <div class="container mx-auto px-4 py-8 max-w-4xl">
    <!-- Tabs -->
<div class="flex space-x-2 border-b border-gray-200 mb-6 overflow-auto">
  <button class="tab-btn tab-active px-6 py-3 font-medium text-sm" data-tab="overview">
    Overview
  </button>
<button class="tab-btn tab-inactive px-6 py-3 font-medium text-sm" data-tab="faqs" id="faqs-tab">
  Frequently Asked Questions (FAQs)
</button>
      <button class="tab-btn tab-inactive px-6 py-3 font-medium text-sm" data-tab="session-lookup" id="session-lookup-tab">
    Session Information Lookup
  </button>
<button class="tab-btn tab-inactive px-6 py-3 font-medium text-sm" data-tab="ceu" id="ceu-tab">
  <span class="desktop-label">
    CEU Information and Question Generator
  </span>
  <span class="mobile-label">
    CEU Information
  </span>
</button>
<button class="tab-btn tab-inactive tab-external px-6 py-3 font-medium text-sm" id="speaker-resource-guide">
  Speaker Resource Guide (PDF)
</button>
  <button class="tab-btn tab-inactive tab-external px-6 py-3 font-medium text-sm" id="attendee-hub-video">
    Informational Video on Attendee Hub
  </button>

<button class="tab-btn tab-inactive tab-external px-6 py-3 font-medium text-sm" id="speaker-resource-center">
  Speaker Portal & Questionnaire
</button>
</div>
    <main>
      <!-- Overview -->
      <section id="overview" class="content-section active bg-white p-6 rounded-lg shadow mb-6">
        <h2 class="text-2xl font-bold text-[#162A53] mb-4">Overview</h2>
        <p class="text-gray-700">
          As the conference nears, this page will populate with a variety of useful information. We recommend that speakers bookmark this page for easy access. Information and resources on this page are not intended to replace the official <a href="https://cvent.me/YRmVVA" target="_blank" rel="noopener noreferrer" class="text-[var(--primary-blue)] underline">Speaker Portal & Questionnaire</a>, which is where where you can review the date and time for your session(s), adjust your presentation details, update your speaker profile, upload documents and links, and answer important questions in the Speaker Questionnaire. When Attendee Hub launches, the link to access the Attendee Hub portal will populate here as well.<br><br>Remember, all speakers must be registered for the conference in order to access Attendee Hub, the online event center, from within which presenters will access and host their sessions.</p>
      <br>
      <div class="mt-4">
  <a
    href="https://cvent.me/grogV9"
    target="_blank"
    rel="noopener noreferrer"
    class="inline-flex w-full sm:w-auto items-center justify-center gap-2 rounded-lg px-6 py-3 font-semibold shadow transition hover:brightness-110 focus:outline-none focus:ring-4"
    style="background: var(--primary-blue); color: #fff !important; box-shadow: 0 6px 12px var(--shadow-light);"
  >
    Register Now
    <svg aria-hidden="true" width="18" height="18" viewBox="0 0 24 24">
      <path fill="currentColor" d="M5 12h12.17l-4.59-4.59L14 6l7 7-7 7-1.41-1.41L17.17 13H5z"/>
    </svg>
  </a>
</div>

</section>


      <section id="faqs" class="content-section bg-white p-6 rounded-lg shadow">
  <h2 class="text-2xl font-bold text-[#162A53] mb-4">Frequently Asked Questions (FAQs)</h2>

  <div class="space-y-4 text-gray-800">
    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">Can I use polls during my session?</summary>
      <p class="mt-2">
        Yes, whether or not your session is in an Embedded or Zoom video format, you will be able to create and launch polls.
        Please reference <a href="https://custom.cvent.com/AE944F71438646268B70FF5BF3772347/files/event/6e39e63ddecc460ba1e0481e3ecf2d04/cbf0f7896c9e45018217c1d9f9df0386.pdf" target="_blank" rel="noopener noreferrer" class="underline text-[var(--primary-blue)]">this Speaker Resource Guide (PDF)</a> for more information.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">How do I know if my session is in an Embedded or regular Zoom video format?</summary>
      <p class="mt-2">
        Click on the <b>Session Information Lookup</b> tab above and follow the prompts.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">How do I know if my session is CEU Eligible?</summary>
      <p class="mt-2">
        Click on the <b>Session Information Lookup</b> tab above and follow the prompts. Additionally, you will be able to see your session’s CEU Eligibility in Attendee Hub.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">How do I make changes to my session or speaker information?</summary>
      <p class="mt-2">
        You can make changes to your session and speaker profile, at any time, by accessing the Speaker Portal. The Speaker Portal allows you to make changes to your speaker profile (e.g., name, company, title, bio, social media links) and session information (e.g., title, description) by clicking on the “My Sessions” and “My Profile” tabs at the top of the page once you are logged in. You can access the Speaker Portal by clicking on this link:
        <a href="https://cvent.me/YRmVVA" target="_blank" rel="noopener noreferrer" class="underline text-[var(--primary-blue)]">https://cvent.me/YRmVVA</a>.
        Please log in with the email associated with your speaker profile.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">How do I log into Attendee Hub?</summary>
      <p class="mt-2">
        Once the Attendee Hub site is launched, you will receive an email with the link to log in.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">I am not sure what email is associated with my registration. How do I find that out?</summary>
      <p class="mt-2">
        Try to identify your registration confirmation email which included the subject line, <i>Registration Confirmed | 2025 International Virtual Conference: A Call to Action to Change Child Welfare</i>.
        Alternatively, you can email the CTA Conference Team at
        <a href="mailto:ctaconference@cuanschutz.edu" class="underline">ctaconference@cuanschutz.edu</a>.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">I cannot find my verification code to access Attendee Hub. What should I do?</summary>
      <p class="mt-2">
        If you checked your spam or junk folder and still can’t find your verification code, this likely means you are using the wrong email to log in.
        Please identify your registration email by following the instruction above or
        <a href="mailto:ctaconference@cuanschutz.edu" class="underline">send us a message</a>.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">How do I start or host my conference session?</summary>
      <p class="mt-2">
        In Attendee Hub, hover over <b>Schedule</b> and click on <b>All Sessions</b>. Type in the name of your session in the Search Bar or use the filters in the left-hand column to find your session. Then, click on your session name. Do not click Join as participant. Instead, click on <b>Join as host</b>. You can start your session by joining as a host as early as you want; however, participants will be able to join your session starting 5 minutes before it is scheduled to begin.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">I cannot find my session in Attendee Hub. What should I do?</summary>
      <p class="mt-2">
        In Attendee Hub, try using a shorter keyword to find your session. For example, if your session is called <i>Centering Culture for Transformative Systems Change</i>, try searching for <i>Centering Culture</i>. You can also search for your session using any of the filters in the left-hand column (e.g., by time, date, speaker).
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">Why don’t I see a “Join as host” button in Attendee Hub?</summary>
      <p class="mt-2">
        The <b>Join as host</b> button will not appear until September 26, 2025. If you would like to practice joining as a host or for any other reason access your session before September 26th, please email the <a href="mailto:ctaconference@cuanschutz.edu" class="underline">CTA Conference Team</a>. After September 26th, if you do not see the <b>Join as host</b> button next to your session, there are a few possible reasons why that could be, however the most likely is that you are not listed as a Host on that session.
        Please reach out to the CTA Conference Team at
        <a href="mailto:ctaconference@cuanschutz.edu" class="underline">ctaconference@cuanschutz.edu</a>,
        so we can investigate and provide support.
      </p>
    </details>

    <details class="border border-gray-200 rounded-md p-3">
      <summary class="font-semibold cursor-pointer">Something about my session does not look correct. Can I make edits to the name or description of my session? Can I change who is listed as a speaker?</summary>
      <p class="mt-2">
        You can make changes to your session by logging into the (<a href="https://cvent.me/YRmVVA" target="_blank" rel="noopener noreferrer" class="underline text-[var(--primary-blue)]">Speaker Portal</a>).
        Please reach out to the <a href="mailto:ctaconference@cuanschutz.edu" class="underline">CTA Conference Team</a>
        if a speaker should be added or removed from your session. Please keep in mind that the conference team uses their knowledge of who is listed as a speaker to determine who has the ability to host and manage sessions.
      </p>
    </details>
  </div>
</section>



      <!-- CEU Information -->
      <section id="ceu" class="content-section bg-white p-6 rounded-lg shadow">
        <h2 class="text-2xl font-bold text-[#162A53] mb-4">CEU Information</h2>
        <p class="mb-4 text-gray-800">
          We are excited to offer the ability for most speakers to offer CEUs, or Continuing Education Units, to US-based Licensed Social Workers, Licensed Marriage &amp; Family Therapists, and Licensed Mental Health Counselors. We expect over 200 attendees will claim CEUs this year. They are more likely to attend sessions that offer CEU credit.
        </p>
        <p class="mb-4 text-gray-800">
          A significant amount of back-end work goes into making the automated CEU process easy to navigate for attendees and speakers. For instance:
        </p>
        <ul class="list-disc list-inside mb-4 text-gray-800 space-y-2 pl-6">
          <li>
            Attendees have the ability to receive 50+ hours of CEU credit by engaging in live and recorded sessions, which are clearly labeled as CEU Eligible. To receive CEU credit, they participate in the session and then complete a brief 3-question knowledge check survey based on the questions speakers provide.
          </li>
          <li>
            Once the event concludes, attendees are emailed a special URL uniquely tied to their participation. This allows them to download a certificate naming the total CEU credits received along with a transcript of all session names.
          </li>
          <li>
            This certificate automatically updates itself whenever attendees complete a new knowledge check survey.
          </li>
        </ul>
        <p class="mb-6 text-gray-800">
          We ask that at least one speaker on behalf of each CEU-eligible session submit 3 knowledge-check questions (True/False or Multiple-Choice) and 3 measurable objectives (i.e., lessons learned) through the 
          <a href="https://cvent.me/YRmVVA" target="_blank" rel="noopener noreferrer" class="text-[var(--primary-blue)] underline">
            Speaker Portal & Questionnaire</a>. <span style="color: #ff0000;">As the deadline has passed to submit these through the Speaker Portal & Questionnaire, please email them instead to <a href="mailto:ctaconference@cuanschutz.edu" style="color: #d32f2f; text-decoration: underline;">ctaconference@cuanschutz.edu</a>.</span>
        </p>
        <!-- CEU Question & Objective Generator Widget -->
  <div class="ceu-widget hidden sm:block">
    <h2>Generate Ideas for CEU Knowledge-Check Questions &amp; Measurable Objectives</h2>
        <p class="mt-6 mb-2 text-gray-800 font-semibold">
          To generate ideas for these questions and objectives, please note:
        </p>
        <ol class="list-decimal list-inside text-gray-800 space-y-2 pl-6">
          <li>Generated knowledge-check questions and measurable objectives remain saved so long as you do not clear your browser’s local storage. You can reference back to each saved version to choose the most appropriate questions and objectives for your session.</li>
          <li>You can edit and/or copy each set of questions and objectives at any time.</li>
        </ol>
        <br>
    <label for="title">Session Title</label>
    <p class="instruction">As you begin typing, you will see the option to select your session from a drop-down menu. Alternatively, you can simply type in the name of your session here.</p>
    <div style="position: relative;">
      <input id="title" type="text" placeholder="Start typing and then choose from the drop-down…" />
      <div id="suggestions" class="suggestions" style="display: none;"></div>
    </div>

    <label for="description">Session Description</label>
    <p class="instruction">If the session description for your session does not auto-populate, you can enter it here.</p>
    <textarea id="description" rows="4" placeholder="Enter a brief session description…"></textarea>

    <label for="extra">Additional Info (Optional)</label>
    <p class="instruction">Add information here such as how you want your knowledge-check questions and measurable objectives to be generated. You can also include supplemental information about your session to generate the most accurate results.</p>
    <textarea id="extra" rows="3" placeholder="Add any other context or useful information..."></textarea>

    <button id="generate-btn">
      <svg class="icon-send" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M12 19l7-7-7-7M5 12h14"/>
      </svg>
      Generate
    </button>
<div id="output" class="output"></div>
<div class="output-buttons">
  <button id="copy-btn" class="copy-btn">Copy Output</button>
  <button id="edit-btn" class="edit-btn">Edit Output</button>
</div>
<div id="saved-versions" class="saved-versions" style="padding-top: 1rem;"></div>
        </div>
  <script>
    const API_URL = 'https://api.groq.com/openai/v1/chat/completions';
    const API_KEY = 'Bearer API KEY';

    const btn     = document.getElementById('generate-btn');
    const copyBtn = document.getElementById('copy-btn');
    const editBtn = document.getElementById('edit-btn');
    const title   = document.getElementById('title');
    const desc    = document.getElementById('description');
    const extra   = document.getElementById('extra');
    const out     = document.getElementById('output');
    // Limit the number of clicks per day
const MAX_GENERATE_CLICKS = 5; // Maximum allowed clicks per day

btn.addEventListener('click', () => {
  const today = new Date().toISOString().split('T')[0];
  const generateData = JSON.parse(localStorage.getItem('generateData')) || { date: '', count: 0 };

  // reset daily count if needed
  if (generateData.date !== today) {
    generateData.date = today;
    generateData.count = 0;
  }

  const remainingClicks = MAX_GENERATE_CLICKS - generateData.count;

  // 1) Check limit
  if (remainingClicks <= 0) {
    out.textContent = `You have reached the maximum number of generations (${MAX_GENERATE_CLICKS}) for today. This limit resets each day. Your saved knowledge-check questions and measurable objectives will remain available for you to copy and paste so long as you do not clear your browser's local storage.`;
    return;
  }

  // 2) Check required inputs *before* decrementing
  if (!title.value.trim() || !desc.value.trim()) {
   // prevent this validation failure from overwriting any saved version
   selectedVersion = null;
    out.textContent = 'Please fill in at least the title and description.';
    return;
  }

  // 3) All good — generate and *then* decrement
  generateCEU();
  generateData.count += 1;
  localStorage.setItem('generateData', JSON.stringify(generateData));
  btn.textContent = `Re-Generate (${MAX_GENERATE_CLICKS - generateData.count} Remaining)`;
});

    copyBtn.addEventListener('click', () => {
      navigator.clipboard.writeText(out.textContent);
      copyBtn.textContent = 'Copied!';
      setTimeout(() => { copyBtn.textContent = 'Copy Output'; }, 2000);
    });

let selectedVersion = null; // Track the currently selected version

editBtn.addEventListener('click', () => {
  const currentOutput = out.textContent.trim();

  if (editBtn.textContent === 'Edit Output') {
    out.contentEditable = 'true';
    out.focus();
    editBtn.textContent = 'Save Output';
    editBtn.style.background = 'var(--green)'; // Change color for Save Output
  } else {
    out.contentEditable = 'false';
    editBtn.textContent = 'Edit Output';
    editBtn.style.background = 'var(--blue)'; // Revert color for Edit Output

    // Update the currently selected version
    if (selectedVersion) {
      selectedVersion.dataset.content = currentOutput; // Update the content
      saveToLocalStorage(); // Save updated versions to localStorage
    }
  }
});

// Save the saved versions to localStorage
function saveToLocalStorage() {
  const savedVersionsDiv = document.getElementById('saved-versions');
  const versions = Array.from(savedVersionsDiv.children).map(div => ({
    content: div.dataset.content,
    label: div.textContent
  }));
  localStorage.setItem('savedVersions', JSON.stringify(versions));
}

// Load the saved versions from localStorage
function loadFromLocalStorage() {
  const savedVersionsDiv = document.getElementById('saved-versions');
  const savedVersions = JSON.parse(localStorage.getItem('savedVersions')) || [];
  savedVersions.forEach(version => {
    const versionDiv = document.createElement('div');
    versionDiv.className = 'version';
    versionDiv.textContent = version.label;
    versionDiv.dataset.content = version.content;
versionDiv.addEventListener('click', () => {
  const currentOutput = out.textContent.trim();

  // Save the current output before switching, if it's not a duplicate
  const isDuplicate = Array.from(savedVersionsDiv.children).some(div => div.dataset.content === currentOutput);
  if (currentOutput && !isDuplicate && !selectedVersion) {
    saveVersion(currentOutput, savedVersionsDiv);
  }

  // Set the clicked version as the selected version
  selectedVersion = versionDiv;
  out.textContent = versionDiv.dataset.content; // Restore the clicked version

  // Show the Copy and Edit buttons
  copyBtn.classList.add('visible');
  editBtn.classList.add('visible');
});
    savedVersionsDiv.appendChild(versionDiv);
  });
}

async function generateCEU() {
  const currentOutput = out.textContent.trim(); // Get current output
  const savedVersionsDiv = document.getElementById('saved-versions'); // Get saved versions container

  const t = title.value.trim();
  const d = desc.value.trim();
  if (!t || !d) {
    out.textContent = 'Please fill in at least the title and description.';
    return;
  }
  out.innerHTML = '<p class="loading">Generating…</p>';

  const payload = {
    model: 'llama-3.3-70b-versatile',
    messages: [
      {
        role: 'system',
        content: 'For the Virtual Call to Action to Change Child Welfare Conference, generate exactly three True or False knowledge-check questions about the session content and exactly three measurable learning objectives. Output them with two headers, "Suggested Knowledge-Check Questions:" and "Suggested Measurable Objectives:" MUST ADHERE TO ALL OF THESE RULES: 1.Knowledge-Check Questions and objectives should ONLY be based off the content presented and Knowledge-Check Questions should NEVER be about the nature of the session or conference itself, usually about certain aspects of the content (eg never say this Session focuses on or this Session suggests or anything about the nature of the session itself 2. dont add any extra asterisks/hastags or any other symbols for emphasis especially for the headers and T/F questions. Seriously dont. 3. Dont make assumptions 4. Questions should not be in future tense because that wouldnt make sense. 5. Never refer to yourself (eg in the first person) in your response. 6. If you do not have enough information, output what information youre missing and ask user to add more "Additional Info". 7. USE YOUR BRAIN: dont say anything that doesnt make sense.'
      },
      {
        role: 'user',
        content:
          `Session Title: ${t}\n` +
          `Description: ${d}\n` +
          `Additional Info: ${extra.value.trim()}`
      }
    ],
    temperature: 0.7,
    max_tokens: 500
  };

  try {
    const res = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': API_KEY
      },
      body: JSON.stringify(payload)
    });

    if (!res.ok) {
      const err = await res.text();
      out.textContent = `Error ${res.status}: ${res.statusText}\n${err}`;
      return;
    }

    const data = await res.json();
    const msg = data.choices?.[0]?.message?.content?.trim() || 'No response.';
    out.textContent = msg;

    // Save the generated content as a new version
    saveVersion(msg, savedVersionsDiv);

    copyBtn.classList.add('visible'); // Show the copy button
    editBtn.classList.add('visible'); // Show the edit button
  } catch (e) {
    out.textContent = `Network error: ${e.message}`;
  }

  // Reset the selected version after generating new content
  selectedVersion = null;
}

function saveVersion(content, savedVersionsDiv) {
  const versionCount = savedVersionsDiv.children.length + 1; // Count existing versions
  const versionDiv = document.createElement('div');
  versionDiv.className = 'version';
  versionDiv.textContent = `Saved Output, Version ${versionCount}`;
  versionDiv.dataset.content = content; // Store the output content in a data attribute
  versionDiv.addEventListener('click', () => {
    const currentOutput = out.textContent.trim();

    // Save the current output before switching, only if it's not a duplicate
    if (selectedVersion && selectedVersion.dataset.content !== currentOutput) {
      selectedVersion.dataset.content = currentOutput; // Update the content of the selected version
      saveToLocalStorage(); // Save updated versions to localStorage
    }

    // Set the clicked version as the selected version
    selectedVersion = versionDiv;
    out.textContent = versionDiv.dataset.content; // Restore the clicked version

    // Show the Copy and Edit buttons
    copyBtn.classList.add('visible');
    editBtn.classList.add('visible');
  });
  savedVersionsDiv.appendChild(versionDiv); // Add the version to the container
  saveToLocalStorage(); // Save to localStorage
}

const sessions = [
  {
    "id": "d1a72455-c3dc-408c-9128-0d3670a20aa5",
    "title": "Working in partnership with conflict and change",
    "description": "Paul Nixon will deliver this skills session, exploring strategies for navigating conflict and change through collaborative approaches.",
    "date": "October 6, 2025",
    "time": "10:30 AM - 12:00 PM",
    "datetime": "2025-10-06T10:30:00-06:00",
    "dateValue": "oct6",
    "type": "Skill Development",
    "theme": "Interagency and Community Partnership Approaches",
    "specialTag": "",
    "recordingStatus": "Recorded",
    "ceuEligibility": "CEU Eligible",
    "videoFormat": "Zoom",
    "speakers": [
      {
        "name": "Paul Nixon",
        "email": "paulnix76@gmail.com"
      }
    ]
  }
];

const titleInput = document.getElementById('title');
    const descInput = document.getElementById('description');
    const suggestionsDiv = document.getElementById('suggestions');

    titleInput.addEventListener('input', () => {
      const query = titleInput.value.toLowerCase().trim();
      suggestionsDiv.innerHTML = '';
      if (!query) {
        suggestionsDiv.style.display = 'none';
        return;
      }

      const matches = sessions.filter(session => session.title.toLowerCase().includes(query));
      if (matches.length > 0) {
        suggestionsDiv.style.display = 'block';
        matches.forEach(session => {
          const suggestion = document.createElement('div');
          suggestion.textContent = session.title;
          suggestion.addEventListener('click', () => {
            titleInput.value = session.title;
            descInput.value = session.description;
            suggestionsDiv.style.display = 'none';
          });
          suggestionsDiv.appendChild(suggestion);
        });
      } else {
        suggestionsDiv.style.display = 'none';
      }
    });

    titleInput.addEventListener('blur', () => {
      setTimeout(() => suggestionsDiv.style.display = 'none', 200);
    });

    titleInput.addEventListener('change', () => {
      const exactMatch = sessions.find(session => session.title.toLowerCase() === titleInput.value.toLowerCase().trim());
      if (exactMatch) {
        descInput.value = exactMatch.description;
      }
    });
    // Load saved versions when the page loads
document.addEventListener('DOMContentLoaded', () => {
  const today = new Date().toISOString().split('T')[0];
  let generateData = JSON.parse(localStorage.getItem('generateData'));

  if (!generateData || generateData.date !== today) {
    generateData = { date: today, count: 0 };
    localStorage.setItem('generateData', JSON.stringify(generateData));
  }

  const remainingClicks = MAX_GENERATE_CLICKS - generateData.count;
  btn.textContent = `Generate (${remainingClicks} Remaining)`;

  // ← Add this line:
  loadFromLocalStorage();
});
  </script>
        <!-- End of CEU widget -->

      </section>

      <!-- Session Information Lookup -->

      <section id="session-lookup" class="content-section bg-white p-6 rounded-lg shadow">
  <h2 class="text-2xl font-bold text-[#162A53] mb-4">Session Information Lookup</h2>
<p>Use this tool to identify details about sessions in which you are presenting, facilitating, or sitting on a panel. You can search by your name or the name of your session to see if your session(s) are set to be recorded, whether or not they are CEU Eligible, and their video formats.</p><br>
  <!-- Tabs -->
  <div class="mb-4">
    <div class="inline-flex rounded-md shadow-sm" role="group">
      <button id="lookup-tab-speaker" type="button"
        class="px-4 py-2 text-sm font-medium border border-gray-200 rounded-l-lg tab-active bg-[#162A53] text-white">
        By Speaker
      </button>
      <button id="lookup-tab-session" type="button"
        class="px-4 py-2 text-sm font-medium border border-gray-200 rounded-r-lg tab-inactive">
        By Session
      </button>
    </div>
  </div>

  <!-- Speaker form -->
  <form id="speaker-form" class="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end mb-4">
    <div>
      <label for="speaker-first" class="block text-sm font-medium text-gray-700">First name</label>
      <input id="speaker-first" type="text" placeholder="e.g., Jane"
        class="mt-1 w-full border-2 border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:border-[#89A84F] focus:ring-0" />
    </div>
    <div>
      <label for="speaker-last" class="block text-sm font-medium text-gray-700">Last name</label>
      <input id="speaker-last" type="text" placeholder="e.g., Doe"
        class="mt-1 w-full border-2 border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:border-[#89A84F] focus:ring-0" />
    </div>
    <div class="flex gap-2">
      <button id="speaker-search" type="submit"
        class="w-full px-4 py-2 bg-[#162A53] text-white font-semibold rounded-lg">Search</button>
      <button id="speaker-clear" type="button"
        class="px-4 py-2 border-2 border-gray-200 rounded-lg">Clear</button>
    </div>
  </form>

  <!-- Session form -->
  <form id="session-form" class="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end mb-4 hidden" autocomplete="off">
    <div class="sm:col-span-2 relative">
      <label for="session-title" class="block text-sm font-medium text-gray-700">Session title</label>
      <input id="session-title" type="text" placeholder="Type a few words from the title…"
        class="mt-1 w-full border-2 border-gray-200 rounded-lg px-3 py-2 focus:outline-none focus:border-[#89A84F] focus:ring-0" />
      <div id="session-suggestions" class="absolute z-10 bg-white border border-gray-200 rounded-lg shadow mt-1 w-full hidden max-h-48 overflow-y-auto"></div>
    </div>
    <div class="flex gap-2">
      <button id="session-search" type="submit"
        class="w-full px-4 py-2 bg-[#162A53] text-white font-semibold rounded-lg">Search</button>
      <button id="session-clear" type="button"
        class="px-4 py-2 border-2 border-gray-200 rounded-lg">Clear</button>
    </div>
  </form>

  <!-- Pro tips -->
  <div id="lookup-tips" class="text-sm text-gray-600 mb-4">
    <!-- tips text injected dynamically -->
  </div>

  <!-- Results -->
  <div id="lookup-results" class="overflow-x-auto"></div>
  <p id="lookup-status" class="mt-3 text-sm text-gray-500"></p>
</section>

    </main>
  </div>

  <script>
// Tab switching
const tabs = document.querySelectorAll('.tab-btn');
const sections = document.querySelectorAll('.content-section');

tabs.forEach(btn => {
  btn.addEventListener('click', () => {
    // Skip tab-switching for external-link tabs
    if (btn.id === 'speaker-resource-center' ||
        btn.id === 'speaker-resource-guide'  ||
        btn.id === 'attendee-hub-video') return;

    // Normal tab switching for internal tabs
    tabs.forEach(t => t.classList.replace('tab-active', 'tab-inactive'));
    sections.forEach(s => s.classList.remove('active'));
    btn.classList.replace('tab-inactive', 'tab-active');
    if (btn.dataset.tab) {
      document.getElementById(btn.dataset.tab).classList.add('active');
    }
  });
});

// Add this code for the Speaker Portal & Questionnaire tab
const speakerResourceCenterBtn = document.getElementById('speaker-resource-center');
speakerResourceCenterBtn.addEventListener('click', (event) => {
  event.preventDefault(); // Prevent default behavior
  window.open('https://cvent.me/YRmVVA', '_blank'); // Open the URL in a new tab
});

// Speaker Resource Guide (PDF) tab (opens external)
const speakerResourceGuideBtn = document.getElementById('speaker-resource-guide');
speakerResourceGuideBtn.addEventListener('click', (event) => {
  event.preventDefault();
  window.open('https://custom.cvent.com/AE944F71438646268B70FF5BF3772347/files/event/6e39e63ddecc460ba1e0481e3ecf2d04/cbf0f7896c9e45018217c1d9f9df0386.pdf', '_blank');
});

// Informational Video on Attendee Hub (opens external)
const attendeeHubVideoBtn = document.getElementById('attendee-hub-video');
attendeeHubVideoBtn.addEventListener('click', (event) => {
  event.preventDefault();
  window.open('https://youtu.be/WQYB2zQsYaM', '_blank');
});


  </script>

<script>
/* ---------- Session Lookup Logic (uses existing `sessions`) ---------- */

/** Normalize: lowercase, trim, collapse spaces, strip punctuation/accents/hyphens/apostrophes */
function normalize(str) {
  if (!str) return '';
  return str
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // remove accents
    .replace(/[-'’]/g, ' ')          // hyphens/apostrophes -> space
    .replace(/[^a-z0-9\s]/g, '')     // strip other punctuation
    .replace(/\s+/g, ' ')
    .trim();
}

/** Quick token similarity (Jaccard) */
function tokenSimilarity(a, b) {
  const A = new Set(normalize(a).split(' ').filter(Boolean));
  const B = new Set(normalize(b).split(' ').filter(Boolean));
  if (A.size === 0 || B.size === 0) return 0;

  let inter = 0;
  A.forEach(t => { if (B.has(t)) inter++; });
  const union = A.size + B.size - inter;
  const jaccard = inter / union;

  const subsetBoost = ([...A].every(t => B.has(t)) || [...B].every(t => A.has(t))) ? 0.15 : 0;
  return Math.min(1, jaccard + subsetBoost);
}

/** Simple Levenshtein for tie-breaks */
function levenshtein(a, b) {
  a = normalize(a); b = normalize(b);
  const m = a.length, n = b.length;
  if (!m) return n; if (!n) return m;
  const dp = Array.from({length: m+1}, (_, i) => [i]);
  for (let j=1;j<=n;j++) dp[0][j] = j;
  for (let i=1;i<=m;i++) {
    for (let j=1;j<=n;j++) {
      const cost = a[i-1] === b[j-1] ? 0 : 1;
      dp[i][j] = Math.min(
        dp[i-1][j] + 1,
        dp[i][j-1] + 1,
        dp[i-1][j-1] + cost
      );
    }
  }
  return dp[m][n];
}

function scoreTitle(query, title) {
  const ts = tokenSimilarity(query, title);
  if (query.length <= 20 || title.length <= 20) {
    const maxLen = Math.max(normalize(query).length, normalize(title).length) || 1;
    const lev = levenshtein(query, title);
    const levScore = 1 - (lev / maxLen);
    return (ts * 0.7) + (levScore * 0.3);
  }
  return ts;
}

/** Build flat speaker index */
function buildSpeakerIndex() {
  const rows = [];
  for (const s of sessions) {
    (s.speakers || []).forEach(sp => {
      const display = sp.name || '';
      const n = normalize(display);
      const n2 = n.replace(/\s+/g, '');
      rows.push([s, display, n, n2]);
    });
  }
  return rows;
}
const SPEAKER_INDEX = buildSpeakerIndex();

/** Search by speaker */
function searchBySpeaker(first, last) {
  const qFull = normalize(`${first} ${last}`);
  const qTight = qFull.replace(/\s+/g, '');
  const results = [];

  for (const [sess, display, n, n2] of SPEAKER_INDEX) {
    const sim = Math.max(tokenSimilarity(qFull, n), tokenSimilarity(qTight, n2));
    if (sim >= 0.45) {
      results.push({ session: sess, similarity: sim, speakerMatched: display });
    }
  }

  const bestById = new Map();
  results.forEach(r => {
    const id = r.session.id;
    if (!bestById.has(id) || r.similarity > bestById.get(id).similarity) {
      bestById.set(id, r);
    }
  });
  return [...bestById.values()].sort((a,b)=>b.similarity - a.similarity);
}

/** Search by title */
function searchByTitle(query) {
  const out = [];
  for (const s of sessions) {
    const sc = scoreTitle(query, s.title || '');
    if (sc >= 0.35) out.push({ session: s, similarity: sc });
  }
  return out.sort((a,b)=>b.similarity - a.similarity);
}

/** Render results */
function renderResults(rows, statusEl, containerEl, mode) {
  if (!rows.length) {
    containerEl.innerHTML = '';
    statusEl.textContent = 'No matches found.';
    return;
  }
  const html = `
    <table class="min-w-full text-sm">
      <thead>
        <tr class="border-b">
          <th class="text-left py-2 pr-4 font-semibold">Title</th>
          ${mode==='speaker' ? '<th class="text-left py-2 pr-4 font-semibold">Speaker</th>' : ''}
          <th class="text-left py-2 pr-4 font-semibold">Recording</th>
          <th class="text-left py-2 pr-4 font-semibold">CEU</th>
          <th class="text-left py-2 pr-4 font-semibold">Video Format</th>
        </tr>
      </thead>
      <tbody>
        ${rows.map(r => {
          const s = r.session;
          return `
            <tr class="border-b align-top">
              <td class="py-2 pr-4">${s.title || ''}</td>
              ${mode==='speaker' ? `<td class="py-2 pr-4">${r.speakerMatched || ''}</td>` : ''}
              <td class="py-2 pr-4">${s.recordingStatus || ''}</td>
              <td class="py-2 pr-4">${s.ceuEligibility || ''}</td>
              <td class="py-2 pr-4">${s.videoFormat || ''}</td>
            </tr>
          `;
        }).join('')}
      </tbody>
    </table>
  `;
  containerEl.innerHTML = html;
  statusEl.textContent = `${rows.length} match${rows.length===1?'':'es'} found.`;
}

/* ---- Wire up UI ---- */
const tabSpeakerBtn = document.getElementById('lookup-tab-speaker');
const tabSessionBtn = document.getElementById('lookup-tab-session');
const speakerForm  = document.getElementById('speaker-form');
const sessionForm  = document.getElementById('session-form');
const resultsEl    = document.getElementById('lookup-results');
const statusEl     = document.getElementById('lookup-status');
const tipsEl       = document.getElementById('lookup-tips');

function updateTips(mode) {
  if (mode==='speaker') {
    tipsEl.innerHTML = `
      <p>Tips for Speaker search:</p>
      <ul class="list-disc list-inside">
        <li>If the search is not returning any results, try just using your first or last name.</li>
        <li>If you still can't identify yourself, please contact the CTA Conference Team.</li>
        <li>Double check the <b>Speaker</b> column to confirm the outputted sessions belong to you.</li>
      </ul>
    `;
  } else {
    tipsEl.innerHTML = `
      <p>Tips for Session search:</p>
      <ul class="list-disc list-inside">
        <li>Start typing a few consecutive words from your session title and then select the proper title from the drop-down.</li>
      </ul>
    `;
  }
}

function setTab(which) {
  if (which === 'speaker') {
    tabSpeakerBtn.classList.replace('tab-inactive','tab-active');
    tabSpeakerBtn.classList.add('bg-[#162A53]','text-white');
    tabSessionBtn.classList.remove('bg-[#162A53]','text-white');
    tabSessionBtn.classList.replace('tab-active','tab-inactive');
    speakerForm.classList.remove('hidden');
    sessionForm.classList.add('hidden');
  } else {
    tabSessionBtn.classList.replace('tab-inactive','tab-active');
    tabSessionBtn.classList.add('bg-[#162A53]','text-white');
    tabSpeakerBtn.classList.remove('bg-[#162A53]','text-white');
    tabSpeakerBtn.classList.replace('tab-active','tab-inactive');
    sessionForm.classList.remove('hidden');
    speakerForm.classList.add('hidden');
  }
  resultsEl.innerHTML = '';
  statusEl.textContent = '';
  updateTips(which);
}
tabSpeakerBtn.addEventListener('click', ()=>setTab('speaker'));
tabSessionBtn.addEventListener('click', ()=>setTab('session'));

updateTips('speaker');

// speaker search
speakerForm.addEventListener('submit', (e) => {
  e.preventDefault();
  const first = document.getElementById('speaker-first').value || '';
  const last  = document.getElementById('speaker-last').value || '';
  if (!first && !last) {
    statusEl.textContent = 'Enter at least a first or last name.';
    resultsEl.innerHTML = '';
    return;
  }
  const res = searchBySpeaker(first, last);
  renderResults(res, statusEl, resultsEl, 'speaker');
});
document.getElementById('speaker-clear').addEventListener('click', () => {
  document.getElementById('speaker-first').value = '';
  document.getElementById('speaker-last').value = '';
  resultsEl.innerHTML = '';
  statusEl.textContent = '';
});

// session title search
sessionForm.addEventListener('submit', (e) => {
  e.preventDefault();
  const q = document.getElementById('session-title').value || '';
  if (!q.trim()) {
    statusEl.textContent = 'Type a few words from the session title.';
    resultsEl.innerHTML = '';
    return;
  }
  const res = searchByTitle(q);
  renderResults(res, statusEl, resultsEl, 'session');
});
document.getElementById('session-clear').addEventListener('click', () => {
  document.getElementById('session-title').value = '';
  resultsEl.innerHTML = '';
  statusEl.textContent = '';
});

// autocomplete for sessions
const sessionInput = document.getElementById('session-title');
const suggestionsBox = document.getElementById('session-suggestions');

sessionInput.addEventListener('input', () => {
  const q = sessionInput.value.toLowerCase().trim();
  suggestionsBox.innerHTML = '';
  if (!q) {
    suggestionsBox.classList.add('hidden');
    return;
  }
  const matches = sessions.filter(s => s.title.toLowerCase().includes(q));
  if (!matches.length) {
    suggestionsBox.classList.add('hidden');
    return;
  }
  matches.forEach(s => {
    const div = document.createElement('div');
    div.textContent = s.title;
    div.className = "px-3 py-2 hover:bg-gray-100 cursor-pointer";
    div.addEventListener('click', () => {
      sessionInput.value = s.title;
      suggestionsBox.classList.add('hidden');
      const res = searchByTitle(s.title);
      renderResults(res, statusEl, resultsEl, 'session');
    });
    suggestionsBox.appendChild(div);
  });
  suggestionsBox.classList.remove('hidden');
});
document.addEventListener('click', e => {
  if (!suggestionsBox.contains(e.target) && e.target !== sessionInput) {
    suggestionsBox.classList.add('hidden');
  }
});
</script>


</body>
</html>
